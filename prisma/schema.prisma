generator client {
  provider = "prisma-client-js"
<<<<<<< HEAD
  enableTracing = true
=======
  enableTracing = false
<<<<<<< HEAD

=======
>>>>>>> aa5e8426a1aaab7d813b505cb60fb34ba775b0b6
>>>>>>> 132b64e90ec301efeb581cefd8f0c55026289875
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL") // миграции (всегда Direct 5432)
}

model User {
  id        Int       @id @default(autoincrement())
  username  String?
  firstName String?
  lastName  String?
  telegramId BigInt   @unique
  role      Role      @default(OWNER)
  shares    Share[]
  bookings  Booking[]
  exchanges Exchange[] @relation("UserExchanges")
}

enum Role {
  OWNER
  ADMIN
}

model Property {
  id      Int      @id @default(autoincrement())
  title   String
  shares  Share[]
  slots   CalendarSlot[]
  gallery Json?
  location String?
  rooms   Int?         
  areaM2  Float? 
  coordinates Json?
}

model Share {
  id         Int      @id @default(autoincrement())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  owner      User     @relation(fields: [ownerId], references: [id])
  ownerId    Int
  bookings   Booking[]
  fraction   String?
}

model CalendarSlot {
  id         String   @id @default(cuid())
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId Int
  startDate  DateTime
  endDate    DateTime
  type       SlotType
  priority   Boolean  @default(false)
  bookings   Booking[] // связь через Booking.slotId
}


enum SlotType {
  AVAILABLE
  BLOCKED_HOLIDAY
  BOOKED
}

model Booking {
  id          Int           @id @default(autoincrement())
  slot        CalendarSlot  @relation(fields: [slotId], references: [id])
  slotId      String
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  share       Share         @relation(fields: [shareId], references: [id])
  shareId     Int
  status      BookingStatus
  requestedAt DateTime      @default(now()) // <-- поле для сортировки
}



enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model Exchange {
  id            BigInt         @id @default(autoincrement())
  requester     User           @relation("UserExchanges", fields: [requesterId], references: [id])
  requesterId   Int
  fromBookingId Int
  targetPropId  Int
  targetSlotId  String
  message       String?
  history       Json?
  status        ExchangeStatus @default(PENDING)
}


enum ExchangeStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
