generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")     // миграции (всегда Direct 5432)
}

model User {
  id        Int       @id @default(autoincrement())
  username  String?
  firstName String?
  lastName  String?
  telegramId BigInt   @unique
  shares    Share[]
  bookings  Booking[] // relation field
  exchanges Exchange[] @relation("UserExchanges")
}

enum Role {
  OWNER
  ADMIN
}

model Property {
  id            String   @id @default(cuid())
  title         String
  location      String
  rooms         Int
  areaM2        Int
  gallery       Json
  coordinates   Json?
  shares        Share[]
  calendarSlots CalendarSlot[]
}

model Share {
  id          String   @id @default(cuid())
  propertyId  String
  ownerId     String
  fraction    String
  property    Property @relation(fields: [propertyId], references: [id])
  owner       User     @relation(fields: [ownerId], references: [id])
  bookings    Booking[]
}

model CalendarSlot {
  id          String   @id @default(cuid())
  propertyId  String
  startDate   DateTime
  endDate     DateTime
  type        SlotType
  priority    Boolean  @default(false)
  booking     Booking?
  property    Property @relation(fields: [propertyId], references: [id])
}

enum SlotType {
  AVAILABLE
  BLOCKED_HOLIDAY
  BOOKED
}

model Booking {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  share   Share  @relation(fields: [shareId], references: [id])
  shareId Int
  slotId  Int
  status  String
  requestedAt DateTime @default(now())
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model Exchange {
  id            String   @id @default(cuid())
  requesterId   String
  fromBookingId String
  targetPropId  String
  targetSlotId  String
  status        ExchangeStatus @default(PENDING)
  message       String?
  history       Json?
  requester     User     @relation("UserExchanges", fields: [requesterId], references: [id])
}

enum ExchangeStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}
